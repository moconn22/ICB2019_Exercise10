?plot
# Example
x <- "dataset"
typeof(x)
attributes(x)
y <- 1:10
y
typeof(y)
length(y)
z <- as.numeric(y)
z
typeof(z)
i got really confused so i had to give up sorry
ages <- data.frame(names=c("Stu", "Colin", "John")), ages=c(38, 24,23))
ages <- data.frame(names=c("Stu", "Colin", "John")), ages=c(38,24,23))
ages <- data.frame(names=c("Stu","Colin","John"), ages=c(38,24,23))
View(ages)
dim(ages)
ages[2,]
ages[2]
agesMatrix<-as.matrix(agesMatrix)
agesMatrix<- as.matrix(ages)
str(agesMatrix)
str(ages)
agesMatrix[2]
agesMatrix[,2]
ages$ages
ages[1:2,2]
ages
ages$ages<30
ages[ages$ages<30,]
ages[ages$ages>30,]
ages[ages$ages==38,]
ages[ages$ages=38,]
file <- vector(names=c("Stu","John"","Colin","Sam","Maggie"))
file<-vector(names=c("Stu","John"","Colin","Sam","Maggie"))
names<-vector(names=c("Stu","John"","Colin","Sam","Maggie"))
names<-c
names<-c
names<-c("Stu","John","Colin","Sam","Maggie")
names
names[3]
names[1,2]
names[1:2]
?list
?matrix
matrix(1,4,2:2)
matrix(data=1-4,nrow=2,ncol=2)
names
r<-0.2
k<-100
#N(t+1)=Nt+rNt, this is called density independent growth
#density dependent growth, have to add k, N(t+1)=Nt+rNt(1-Nt/k), inside the ()is the part about the limiation
#if this was plotted on a graph, it would be a line going down, we can code this
#need time points to simulate over (simulate for 100 years)
#need a place to store population sizes (value of state variable through time)
#values for our parameters (r=0.2, K=100)
#a loop for simulating
#set values for R and K
#also need initial starting place, N0=2
#create vector to store N's
N0<-2
?numeric
N0<-2
k<-100
r<-0.2
timesteps=100
#create vector to store N's
Ns<-numeric(length = timesteps)
Ns[1]=N0
Ns
for (t in 1:100) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/K)
}
for (t in 1:100) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/k)
}
length(Ns)
ggplot((data=pop, aes(x=time, y=N))+geom_line())
library(ggplot2)
sim<-dataframe(time=1:length(Ns), N=Ns)
ggplot((data=sim, aes(x=time, y=N))+geom_line())
ggplot(data=sim,aes(x=time, y=N))+geom_line()+theme_classic()
library(ggplot2)
sim<-dataframe(time=1:length(Ns), N=Ns)
ggplot(data=sim,aes(x=time, y=N))+geom_line()+theme_classic()
sim<-data.frame(time=1:length(Ns), N=Ns)
library(ggplot2)
sim<-data.frame(time=1:length(Ns), N=Ns)
ggplot(data=sim,aes(x=time, y=N))+geom_line()+theme_classic()
for (t in 1:(timesteps-1)) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/k)
}
Ns<-numeric(length = timesteps)
Ns[1]=N0
for (t in 1:(timesteps-1)) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/k)
}
#plot simulation
library(ggplot2)
sim<-data.frame(time=1:length(Ns), N=Ns)
ggplot(data=sim,aes(x=time, y=N))+geom_line()+theme_classic()
N0<-100
k<-100
r<-0.2
timesteps=100
Ns<-numeric(length = timesteps)
Ns[1]=N0
for (t in 1:(timesteps-1)) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/k)
}
#plot simulation
library(ggplot2)
sim<-data.frame(time=1:length(Ns), N=Ns)
ggplot(data=sim,aes(x=time, y=N))+geom_line()+theme_classic()
N0<-20
k<-100
r<-0.2
timesteps=100
Ns<-numeric(length = timesteps)
Ns[1]=N0
for (t in 1:(timesteps-1)) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/k)
}
#plot simulation
library(ggplot2)
sim<-data.frame(time=1:length(Ns), N=Ns)
ggplot(data=sim,aes(x=time, y=N))+geom_line()+theme_classic()
N0<-50
k<-100
r<-0.2
timesteps=100
Ns<-numeric(length = timesteps)
Ns[1]=N0
for (t in 1:(timesteps-1)) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/k)
}
#plot simulation
library(ggplot2)
sim<-data.frame(time=1:length(Ns), N=Ns)
ggplot(data=sim,aes(x=time, y=N))+geom_line()+theme_classic()
N0<-200
k<-100
r<-0.2
timesteps=100
Ns<-numeric(length = timesteps)
Ns[1]=N0
for (t in 1:(timesteps-1)) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/k)
}
#plot simulation
library(ggplot2)
sim<-data.frame(time=1:length(Ns), N=Ns)
ggplot(data=sim,aes(x=time, y=N))+geom_line()+theme_classic()
N0<-99
k<-100
r<-0.2
timesteps=100
Ns<-numeric(length = timesteps)
Ns[1]=N0
for (t in 1:(timesteps-1)) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/k)
}
#plot simulation
library(ggplot2)
sim<-data.frame(time=1:length(Ns), N=Ns)
ggplot(data=sim,aes(x=time, y=N))+geom_line()+theme_classic()
?rnorm
popSim<-function(N0=2, r=0.2, K=100, timesteps=100){
Ns<-numeric(timesteps)
Ns[1]<-N0
for (t in 1:(timesteps-1)) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/k)
}
}
popSim()
Ns
rnorm()
rnorm(100)
rnorm(100, mean = 100, sd=15)
popSim(k=(rnorm(100, mean = 100, sd=15)))
popSim(K=(rnorm(100, mean = 100, sd=15)))
Ns
popSim<-function(N0=2, r=0.2, K=100, timesteps=100){
Ns<-numeric(timesteps)
Ns[1]<-N0
for (t in 1:(timesteps-1)) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/K)
}
}
popSim(K=(rnorm(100, mean = 100, sd=15)))
popSim<-function(N0=2, r=0.2, k=(rnorm(100, mean = 100, sd=15)), timesteps=100){
Ns<-numeric(timesteps)
Ns[1]<-N0
for (t in 1:(timesteps-1)) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/k)
}
}
Ns
popSim<-function(N0=2, r=0.2, k=100, timesteps=100){
Ns<-numeric(timesteps)
Ns[1]<-N0
for (t in 1:(timesteps-1)) {
Ns[t+1]<- Ns[t]+r*Ns[t]*(1-Ns[t]/k)
}
}
setwd("Desktop/Sophomore_Year/bc/examples/exercises/ICB2019_Exercise10/")
K=100000000
rN=0.1
Nt=99
Mt=1
timesteps=100
N(t+1)<-numeric(length = timesteps)
N(t+1)=Nt+rN*Nt(1-(Nt+Mt)/K)
K=100000000
rM=-0.1
Mt=1
Nt=99
timesteps=100
M(t+1)<-numeric(length = timesteps)
M(t+1)=Mt+rM*Mt(1-(Nt+Mt)/K)
#for loop
for (t in 1:(timesteps-1)) {
N(t+1)=Nt+rN*Nt(1-(Nt+Mt)/K)
M(t+1)=Mt+rM*Mt(1-(Nt+Mt)/K)
}
setwd("Desktop/Sophomore_Year/bc/examples/exercises/ICB2019_Exercise10/")
K=100000000
rN=0.1
Nt=99
Mt=1
timesteps=100
N(t+1)<-numeric(length = timesteps)
N(t+1)=Nt+rN*Nt*(1-(Nt+Mt)/K)
K=100000000
rM=-0.1
Mt=1
Nt=99
timesteps=100
M(t+1)<-numeric(length = timesteps)
M(t+1)=Mt+rM*Mt*(1-(Nt+Mt)/K)
#for loop
for (t in 1:(timesteps-1)) {
N(t+1)=Nt+rN*Nt*(1-(Nt+Mt)/K)
M(t+1)=Mt+rM*Mt*(1-(Nt+Mt)/K)
}
